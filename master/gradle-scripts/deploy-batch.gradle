/*
 * バッチのリソースをマスターに集約し、デプロイする
 * ・実行タスク：deployBatch afterDeployBatch
 *
 */
import sample.gradle.multi.build.tasks.CopyExtended

 apply plugin: 'org.hidetake.ssh'
 apply plugin: 'at.bxm.svntools'

ext {

    // 配布リソース情報
    distFilename = String.format("${deployRootDir}-%s.zip", new Date().format('yyyyMMdd'))

    // デプロイリ対象リソースの指定がない場合のダミーファイル名
    none = ['71f8e7976e4cbc4561c9d62fb283e7f788202acb'] // 「none」をsha1でハッシュ化した値

    // デプロイ対象リソース
    includeShells = getAsArray(deployShells)
    includeConfs = getAsArray(deployConfs)
    includeJars = getAsJarArray(deproyJars)
    includeDependencies = getAsJarArray(deproyDependencies)

    // 削除対象リソース
    removeShells = getAsArray(deleteShells)
    removeConfs = getAsArray(deleteConfs)
    removeJars = getAsJarArray(deleteJars)
    removeDependencies = getAsJarArray(deleteDependencies)

    // デプロイしたリソースの差分比較用ディレクトリ
    diffDeploiedDir= "${projectDir}/diff-deploied"
}

// プロパティファイルで指定されたリソースを、配列で取得する
def getAsArray(targets) {

    return targets.trim().isEmpty() ? none : targets.split()
}

// プロパティファイルで指定されたJarを、配列で取得する
def getAsJarArray(targetJars) {

    return targetJars.trim().isEmpty() ? none : targetJars.split().collect{ "${it}-*.jar" }
}

configure(bizBatchProjects) {

    task copyShells(type: CopyExtended) {

        (dependProjects + project).each {

            from "${it.projectDir}/${deployRootDir}/${shellDir}"

            if(environment != envUt) {
                from "${it.projectDir}/${deployRootDir}/${shellDir}_${environment}"
            }
        }

        into "${distsDir}/${deployRootDir}/${shellDir}"
        include includeShells
        presereveTimestamp()
    }

    task copyConfs(type: CopyExtended) {

        (dependProjects + project).each {

            from "${it.projectDir}/${deployRootDir}/${confDir}"

            if(environment != envUt) {
                from "${it.projectDir}/${deployRootDir}/${confDir}_${environment}"
            }
        }

        into "${distsDir}/${deployRootDir}/${confDir}"
        include includeConfs
        presereveTimestamp()
    }

    task copyJars doLast {

        // 業務Jar
        copy {

            from libsDir
            into "${distsDir}/${deployRootDir}/${jarDir}"
            include includeJars
        }

        // 依存Jar
        copy {

            from configurations.compileClasspath
            into "${distsDir}/${deployRootDir}/${dependenciesDir}"
            include includeDependencies
        }
    }

    task zipDists(type: Zip, dependsOn: [copyShells, copyConfs, copyJars])  {

        archiveName = distFilename
        from "${distsDir}/${deployRootDir}"
    }

    ssh.settings { knownHosts = allowAnyHosts }

    // サーバ接続情報
    remotes {

        // 配布リソースの転送ユーザ
        transferer {

            host = deployHost
            user = deployUser
            password = deployPassword
        }

        // 配布リソースのデプロイユーザ
        deployer {

            host = deployHost
            user = deployUser
            password = deployPassword
        }
    }

    // 過去のデプロイリソース削除タスク
    task deleteDeploiedBatch doLast {

        ssh.run {

            session(remotes.deployer)  {

                def remove = { targetDir, targets ->
                    targets.each{ execute("rm -f ${deployRootDir}/${targetDir}/${it}") }
                }

                remove(shellDir, removeShells)
                remove(confDir, removeConfs)
                remove(jarDir, removeJars)
                remove(dependenciesDir, removeDependencies)
            }
        }
    }

    task deployBatch(dependsOn: [zipDists, deleteDeploiedBatch]) doLast {

        ssh.run {

            session(remotes.transferer)  {

                // 作業ディレクトリをクリーン
                execute("rm -rf ${deployWorkDir}/*")
                execute("mkdir -p -m ${modeDir} ${deployWorkDir}")

                // 配布リソースを転送し、解凍
                put from: "${distsDir}/${distFilename}", into: deployWorkDir
                execute("unzip -o ${deployWorkDir}/${distFilename} -d ${deployWorkDir}")
            }

            session(remotes.deployer)  {

                // 他バージョンのJarを削除
                includeJars.each{ execute("rm -f ${deployRootDir}/${jarDir}/${it}") }
                includeDependencies.each{execute("rm -f ${deployRootDir}/${dependenciesDir}/${it}") }

                // デプロイ
                execute("cp -ra ${deployWorkDir}/${deployRootDir} ${deployRootDir}")

                // 権限変更
                def resourceOwner = remotes.deployer.user
                def changeMode = { targetDir, mode ->
                    execute("find ${deployRootDir}/${targetDir} -type f -user ${resourceOwner} | xargs chmod ${mode}")
                }

                changeMode(shellDir, modeShell)
                changeMode(confDir, modeConf)
                changeMode(jarDir, modeJar)
                execute("find ${deployRootDir}/${shellDir} ${deployRootDir}/${confDir} ${deployRootDir}/${jarDir} -type d -user ${resourceOwner} | xargs chmod ${modeDir}")
            }
        }
    }

    // デプロイリソースを、差分比較用ディレクトリにコピー
    task copyReleasedForDiff (type: CopyExtended){

       // 配布リソースをdiffにコピー
        from "${distsDir}/${deployRootDir}"
        into "${diffDeploiedDir}/${deployHost}"
        presereveTimestamp()
    }

    svntools {

        username = svnUser
        password = svnPassword
    }

    task commitReleasedForDiff(type: at.bxm.gradleplugins.svntools.tasks.SvnCommit, dependsOn: copyReleasedForDiff) doLast {

        source <<  "${diffDeploiedDir}/${deployHost}"
        commitMessage = svnCommitDeploiedMessage
    }

    task tagReleased(type: at.bxm.gradleplugins.svntools.tasks.SvnTag) {

        tagName = version
        commitMessage = svnTagMessage
    }

    task afterDeployBatch(dependsOn: [commitReleasedForDiff, tagReleased])
}
