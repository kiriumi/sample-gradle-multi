/*
 * バッチのリソースをデプロイする
 * ・実行タスク：deployBatch
 *
 */
import sample.gradle.multi.build.tasks.CopyExtended

apply plugin: 'org.hidetake.ssh'

ext {

    // 配布リソース情報
    distFilename = String.format("${deployRootDir}-%s.zip", new Date().format('yyyyMMdd'))

    // デプロイ対象リソースの指定がない場合のダミーファイル名
    none = ['71f8e7976e4cbc4561c9d62fb283e7f788202acb'] // 「none」をsha1でハッシュ化した値

    // デプロイ対象リソース
    includeShells = getAsArray(deployShells)
    includeConfs = getAsArray(deployConfs)
    includeJars = getJarsAsArray(deproyJars)
    includeDependencies = getJarsAsArray(deproyDependencies)

    // 削除対象リソース
    removeShells = getAsArray(deleteShells)
    removeConfs = getAsArray(deleteConfs)
    removeJars = getJarsAsArray(deleteJars)
    removeDependencies = getJarsAsArray(deleteDependencies)
}

// プロパティファイルで指定されたリソースを、配列で取得する
def getAsArray(targets) {

    return targets.trim().isEmpty() ? none : targets.split()
}

// プロパティファイルで指定されたJarを、配列で取得する
def getJarsAsArray(targetJars) {

    return targetJars.trim().isEmpty() ? none : targetJars.split().collect{ "${it}-*.jar" }
}

configure(bizBatchProjects) {

    task copyShells(type: CopyExtended) {

        (dependProjects + project).each {

            from "${it.projectDir}/${deployRootDir}/${shellDir}"

            if(environment != envUt) {
                from "${it.projectDir}/${deployRootDir}/${shellDir}_${environment}"
            }
        }

        into "${distsDir}/${deployRootDir}/${shellDir}"

        include includeShells
        presereveTimestamp()
    }

    task copyConfs(type: CopyExtended) {

        (dependProjects + project).each {

            from "${it.projectDir}/${deployRootDir}/${confDir}"

            if(environment != envUt) {
                from "${it.projectDir}/${deployRootDir}/${confDir}_${environment}"
            }
        }

        into "${project.distsDir}/${deployRootDir}/${confDir}"
        include includeConfs
        presereveTimestamp()
    }

    task copyJars doLast {

        // 業務Jar
        copy {

            from libsDir
            into "${distsDir}/${deployRootDir}/${jarDir}"
            include includeJars
        }

        // 依存Jar
        copy {

            from configurations.compileClasspath
            into "${distsDir}/${deployRootDir}/${dependenciesDir}"
            include includeDependencies
        }
    }

    task copyToDists(dependsOn:[copyShells, copyConfs, copyJars])

    ssh.settings { knownHosts = allowAnyHosts }

    remotes {

        deployer {

            host = deployHost
            user = deployUser
            password = deployPassword
        }
    }

    task batchBackup doLast {

        ssh.run { session(remotes.deployer)  {

            execute("cp -afr ${deployRootDir} ${deployBackupDir}")
        }}
    }

    task batchRemove(dependsOn: batchBackup) doLast {

        ssh.run { session(remotes.deployer)  {

            def remove = { targetDir, targets ->

                targets.each{ execute("rm -f ${deployRootDir}/${targetDir}/${it}") }
            }

            remove(shellDir, removeShells)
            remove(confDir, removeConfs)
            remove(jarDir, removeJars)
            remove(dependenciesDir, removeDependencies)
        }}
    }

    task batchDeploy(dependsOn: [copyToDists, batchRemove]) doLast {

        ssh.run { session(remotes.deployer)  {

            // 他のバージョンのJarを削除
            includeJars.each{ execute("rm -f ${deployRootDir}/${jarDir}/${it}") }
            includeDependencies.each{execute("rm -f ${deployRootDir}/${dependenciesDir}/${it}") }

            // デプロイ
            put from: "${distsDir}/${deployRootDir}/${shellDir}", into: "${deployRootDir}/${shellDir}"
            put from: "${distsDir}/${deployRootDir}/${confDir}", into: "${deployRootDir}/${confDir}"
            put from: "${distsDir}/${deployRootDir}/${jarDir}", into: "${deployRootDir}/${jarDir}"
            put from: "${distsDir}/${deployRootDir}/${dependenciesDir}", into: "${deployRootDir}/${dependenciesDir}"

            // 権限変更
            def resourceOwner = remotes.deployer.user
            def changeMode = { targetDir, mode ->
                execute("find ${deployRootDir}/${targetDir} -type f -user ${resourceOwner} | xargs chmod ${mode}")
            }

            changeMode(shellDir, modeShell)
            changeMode(confDir, modeConf)
            changeMode(jarDir, modeJar)
            changeMode(dependenciesDir, modeJar)

            execute("find ${deployRootDir}/${shellDir} ${deployRootDir}/${confDir} ${deployRootDir}/${jarDir} -type d -user ${resourceOwner} | xargs chmod ${modeDir}")
        }}
    }

    task batchDiff(dependsOn: batchDeploy) doLast {

        ssh.run { session(remotes.deployer)  {

            execute("diff -r ${deployRootDir} ${deployBackupDir}")
        }}
    }

    task deployBatch(dependsOn: batchDiff)
}
