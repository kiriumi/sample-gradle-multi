/*
 * Warを作成しWebサーバにデプロイする。（開発の場合はテストも実施）
 * ・実行タスク（開発）：clean assemble cargoStartLocal check cargoStopLocal
 * ・実行タスク（本番）：clean assemble cargoUndeployRemote cargoDeployRemote
 *
 */
configure(bizWebProjects) {

    apply plugin: "com.bmuschko.cargo"

    ext {
        // ローカルWebサーバ情報
        localWebServerHome = localWebServerDir == ''
            ? new File(rootProject.projectDir, "web-server/${webServerHome}")
            : new File("${localWebServerDir}/${webServerHome}")

        localWebServerLibDir = new File(localWebServerHome, webServerLibDir)
    }

    dependencies {

        providedCompile fileTree(dir: localWebServerLibDir, include: 'java*/**/*.jar')

        def cargoVersion = '1.4.5'
        cargo "org.codehaus.cargo:cargo-core-uberjar:${cargoVersion}",
              "org.codehaus.cargo:cargo-ant:${cargoVersion}"
    }

    cargo {

        containerId = cargoContainerId
        port = Integer.parseInt(cargoPort)

        deployable {
            // ページを表示するためのURL：http://ホスト名/contextPath/ページ名
            //   例：http://localhost:8080/SampleWebApp/login.xhtml
            context = contextPath
        }

        local {

            homeDir = localWebServerHome

            def jacocoAagentJar = new File("${jacocoDir}/jacocoagent.jar").path

            jvmArgs = "-Xms64m -Xmx512m -XX:MaxPermSize=256m -Djava.net.preferIPv4Stack=true "
            jvmArgs += "-javaagent:${jacocoAagentJar}=destfile=${jacocoReportFile.path},append=false,excludes=**/Test*.class:**/*Test.class"
        }

        remote {

            hostname = cargoHostName
            username = cargoHostUser
            password = cargoHostPassword
        }
    }
}
