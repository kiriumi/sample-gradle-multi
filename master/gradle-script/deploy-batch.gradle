/*
 * バッチ関連のリソースをマスターに集約し、デプロイする
 * ・実行タスク：clean copy${shellDir} copy"{confDir} copy${jarDir} zipDists deployBatch
 *
 */
 apply plugin: 'java'

ext {
    // マスタープロジェクトに集約する配布リソース情報
    masterDistsDir = "${distsDir}/${deployRootDir}"
    distFilename = String.format("${deployRootDir}-%s.zip", new Date().format('yyyyMMdd'))

    // デプロイ対象リソース
    def none = ['none']
    includeShells = deployShells.trim().isEmpty() ? none : deployShells.split()
    includeConfs = deployConfs.trim().isEmpty() ? none : deployConfs.split()
    includeJars = deproyJars.trim().isEmpty() ? none : deproyJars.split().collect { "${it}-*.jar" }
    includeDependencies = deproyDependencies.trim().isEmpty() ? none : deproyDependencies.split().collect { "${it}-*.jar" }

    isUt = environment == envUt
}

def copyWithTimestamp = { batchProject, fromDir, intoDir , includes ->

    def surffix = file(intoDir).name

    project( ":${batchProject}") {

        task "copy${surffix}"(type: Copy) {

            from fromDir

            if(!environment.equals('REL')) {
                // 開発時は該当の面のシェルをコピー
                from "${fromDir}_${environment}"
            }

            into intoDir
            include includes

            // 更新日時を維持する
            def copyDetails = []
            eachFile { copyDetails << it }
            doLast {
                    copyDetails.each { FileCopyDetails details ->
                            def target = new File(destinationDir, details.path)
                            if(target.exists()) { target.setLastModified(details.lastModified) }
                    }
            }
        }
    }
}

// バッチプロジェクト共通
batchProjects.each { batchProject ->

    // シェルと設定ファイルをコピー
    copyWithTimestamp(batchProject, "${deployRootDir}/${shellDir}", "${masterDistsDir}/${shellDir}", includeShells)
    copyWithTimestamp(batchProject, "$deployRootDir}/${confDir}", "${masterDistsDir}/${confDir}", includeConfs)
}

// 業務バッチプロジェクト
batchBizProjects.each { batchBizProject ->

    project( ":${batchBizProject}") {

        // Jarをコピー
        task "copy${jarDir}" << {

            copy {
                from libsDir
                into "${masterDistsDir}/${jarDir}"
                include includeJars
            }

            copy {
                from configurations.compile
                into "${masterDistsDir}/${dependenciesDir}"
                include includeDependencies
            }
        }
    }
}

// 配布リソースを圧縮
task zipDists(type: Zip)  {
    archiveName = distFilename
    from masterDistsDir
}

// サーバ接続情報
remotes {

    transferer {
        host = deployHost
        user = deployUser
        password = deployPassword

    }

    deployer {
        host = deployHost
        user = deployUser
        password = deployPassword
    }
}

// SSH共通設定　
ssh.settings {
    knownHosts = allowAnyHosts
}

// デプロイ
task deployBatch << {

    def deployWorkDir = '/WORK/deploy'

    ssh.run {

        session(remotes.transferer)  {

            // 作業ディレクトリをクリーン
            execute("rm -rf ${deployWorkDir}/*")
            execute("mkdir -p -m ${modeDir} ${deployWorkDir}")

            // 配布リソースを転送し、解凍
            put from: "${distsDir}/${distFilename}", into: deployWorkDir
            execute("unzip -o ${deployWorkDir}/${distFilename} -d ${deployWorkDir}")
        }

        session(remotes.deployer)  {

            // 他バージョンのJarを削除
            includeJars.each{ targetJar -> execute("rm -f ${deployRootDir}/${jarDir}/${targetJar}") }
            includeDependencies.each{ targetJar -> execute("rm -f ${deployRootDir}/${dependenciesDir}/${targetJar}") }

            // デプロイ
            execute("cp -ra ${deployWorkDir}/${deployRootDir} ${deployRootDir}") // デプロイ

            // 権限変更
            def resourceOwner = remotes.deployer.user
            execute("find ${deployRootDir}/${shellDir} ${deployRootDir}/${confDir} ${deployRootDir}/${jarDir} -type d -user ${resourceOwner} | xargs chmod ${modeDir}")
            execute("find ${deployRootDir}/${shellDir} -type f -user ${resourceOwner} | xargs chmod ${modeShell}")
            execute("find ${deployRootDir}/${confDir} -type f -user ${resourceOwner} | xargs chmod ${modeConf}")
            execute("find ${deployRootDir}/${jarDir} -type f -user ${resourceOwner} | xargs chmod ${modeJar}")
        }
    }
}
