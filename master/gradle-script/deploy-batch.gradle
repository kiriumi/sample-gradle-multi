/*
 * バッチ関連のリソースをマスターに集約し、デプロイする
 * ・実行タスク：clean deployBatch commitDeploied tagDeploied
 *
 */
 apply plugin: 'org.hidetake.ssh'
 apply plugin: 'at.bxm.svntools'

ext {
    // マスタープロジェクトに集約する配布リソース情報
    masterDistsDir = "${distsDir}/${deployRootDir}"
    distFilename = String.format("${deployRootDir}-%s.zip", new Date().format('yyyyMMdd'))

    // デプロイしたリソースの差分比較用ディレクトリ
    diffDeploiedDir= "${projectDir}/diff-deploied"

    // デプロイ対象リソース
    includeShells = getAsArray(deployShells)
    includeConfs = getAsArray(deployConfs)
    includeJars = getAsJarArray(deproyJars)
    includeDependencies = getAsJarArray(deproyDependencies)

    // 削除対象リソース
    removeShells = getAsArray(deleteShells)
    removeConfs = getAsArray(deleteConfs)
    removeJars = getAsJarArray(deleteJars)
    removeDependencies = getAsJarArray(deleteDependencies)

    // 指定された環境がUTか判定
    isUt = (environment == envUt)
}

// プロパティファイルで指定されたリソースを配列にする
// ※空文字の場合は、空振りさせるためnoneを返す
def getAsArray(targets) {

    return targets.trim().isEmpty() ? ['none'] : targets.split()
}

// プロパティファイルで指定されたJarを配列にする
// ※空文字の場合は、空振りさせるためnoneを返す
def getAsJarArray(targetJars) {

    return targetJars.trim().isEmpty() ? ['none'] : targetJars.split().collect{ "${it}-*.jar" }
}

// サーバ接続情報
remotes {

    transferer {
        host = deployHost
        user = deployUser
        password = deployPassword

    }

    deployer {
        host = deployHost
        user = deployUser
        password = deployPassword
    }
}

// SSH共通設定　
ssh.settings {
    knownHosts = allowAnyHosts
}

// SVN接続情報
svntools {
    username = svnUser
    password = svnPassword
}

// 拡張コピータスククラス
class CopyExtended extends Copy {

    def presereveTimestamp() {

        def copyFileDetailses = []
        eachFile { copyFileDetailses <<  it } // eachFileの実行タイミングはdoLastと同じ

        doLast {
            copyFileDetailses.each { copyFileDetails ->
                def destFile = new File(destinationDir, copyFileDetails.path)
                if(destFile.exists()) { destFile.setLastModified(copyFileDetails.lastModified) }
            }
        }
    }
}

// 各バッチプロジェクトのシェルと設定ファイルをマスターにコピー
batchProjects.each {

    project(":${it}") {

         // シェルをコピー
        task copyShells(type: CopyExtended) {
            from "${deployRootDir}/${shellDir}"

            if(environment != envUt) {
                from "${deployRootDir}/${shellDir}_${environment}"
            }

            into "${masterDistsDir}/${shellDir}"
            include includeShells
            presereveTimestamp()
        }

        // 設定ファイルをコピー
        task copyConfs(type: CopyExtended) {
            from "${deployRootDir}/${confDir}"

            if(environment != envUt) {
                from "${deployRootDir}/${confDir}_${environment}"
            }

            into "${masterDistsDir}/${confDir}"
            include includeConfs
            presereveTimestamp()
        }
    }
}

// 業務プロジェクトのJarをマスターにコピー
batchBizProjects.each {

    project( ":${it}") {

        // Jarをコピー
        task copyJars << {

            // 業務Jar
            copy {
                from libsDir
                into "${masterDistsDir}/${jarDir}"
                include includeJars
            }

            // 依存Jar
            copy {
                from configurations.compile
                into "${masterDistsDir}/${dependenciesDir}"
                include includeDependencies
            }
        }
    }
}

// 配布リソースを圧縮
task zipDists(type: Zip)  {

    // サブプロジェクトの依存タスク
    batchProjects.each { dependsOn( ["${it}:copyShells", "${it}:copyConfs"]) }
    batchBizProjects.each { dependsOn("${it}:copyJars") }

    archiveName = distFilename
    from masterDistsDir
}

// リソース削除
task deleteDeploied << {

    ssh.run {

        session(remotes.deployer)  {

            def remove = { targetDir, targets ->
                targets.each{ execute("rm -f ${deployRootDir}/${targetDir}/${it}") }
            }

            remove(shellDir, removeShells)
            remove(confDir, removeConfs)
            remove(jarDir, removeJars)
            remove(dependenciesDir, removeDependencies)
        }
    }
}

// デプロイ
task deployBatch(dependsOn: [zipDists, deleteDeploied]) << {

    ssh.run {

        session(remotes.transferer)  {

            // 作業ディレクトリをクリーン
            execute("rm -rf ${deployWorkDir}/*")
            execute("mkdir -p -m ${modeDir} ${deployWorkDir}")

            // 配布リソースを転送し、解凍
            put from: "${distsDir}/${distFilename}", into: deployWorkDir
            execute("unzip -o ${deployWorkDir}/${distFilename} -d ${deployWorkDir}")
        }

        session(remotes.deployer)  {

            // 他バージョンのJarを削除
            includeJars.each{ execute("rm -f ${deployRootDir}/${jarDir}/${it}") }
            includeDependencies.each{execute("rm -f ${deployRootDir}/${dependenciesDir}/${it}") }

            // デプロイ
            execute("cp -ra ${deployWorkDir}/${deployRootDir} ${deployRootDir}")

            // 権限変更
            def resourceOwner = remotes.deployer.user
            def changeMode = { targetDir, mode ->
                execute("find ${deployRootDir}/${targetDir} -type f -user ${resourceOwner} | xargs chmod ${mode}")
            }

            changeMode(shellDir, modeShell)
            changeMode(confDir, modeConf)
            changeMode(jarDir, modeJar)
            execute("find ${deployRootDir}/${shellDir} ${deployRootDir}/${confDir} ${deployRootDir}/${jarDir} -type d -user ${resourceOwner} | xargs chmod ${modeDir}")
        }
    }
}

// デプロイリソースを、差分比較用ディレクトリにコピー
task copyDeploied (type: CopyExtended){

   // 配布リソースをdiffにコピー
    from "${distsDir}/${deployRootDir}"
    into "${diffDeploiedDir}/${deployHost}"
    presereveTimestamp()
}

// デプロイリソースをSVNにコミット
task commitDeploied(type: svnCommitTask, dependsOn: copyDeploied) {

    source <<  "${diffDeploiedDir}/${deployHost}"
    commitMessage = svnCommitDeploiedMessage
}

// デプロイ後にタグ付け
task tagDeploied(type: svnTagTask) {

    tagName = branchName
    commitMessage = svnTagMessage
}
