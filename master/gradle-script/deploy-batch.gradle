/*
 * バッチ関連のリソースをマスターに集約し、デプロイする
 * ・実行タスク：clean copShell copyConf copyJar deployBatch commitDeploied
 *
 */
 apply plugin: 'java'
 apply plugin: 'org.hidetake.ssh'
 apply plugin: 'at.bxm.svntools'

ext {
    // マスタープロジェクトに集約する配布リソース情報
    masterDistsDir = "${distsDir}/${deployRootDir}"
    distFilename = String.format("${deployRootDir}-%s.zip", new Date().format('yyyyMMdd'))

    // デプロイしたリソースの差分比較用ディレクトリ
    diffDeploiedDir= "${projectDir}/diff-deploied"

    // デプロイ対象リソース
    def none = ['none']
    includeShells = deployShells.trim().isEmpty() ? none : deployShells.split()
    includeConfs = deployConfs.trim().isEmpty() ? none : deployConfs.split()
    includeJars = deproyJars.trim().isEmpty() ? none : deproyJars.split().collect { "${it}-*.jar" }
    includeDependencies = deproyDependencies.trim().isEmpty() ? none : deproyDependencies.split().collect { "${it}-*.jar" }

    // 指定された環境がUTか判定
    isUt = (environment == envUt)
}

// サーバ接続情報
remotes {

    transferer {
        host = deployHost
        user = deployUser
        password = deployPassword

    }

    deployer {
        host = deployHost
        user = deployUser
        password = deployPassword
    }
}

// SSH共通設定　
ssh.settings {
    knownHosts = allowAnyHosts
}

// SVN接続情報
svntools {
    username = svnUser
    password = svnPassword
}

// 拡張コピータスククラス
class CopyExtended extends Copy {

    def presereveTimestamp() {

        def copyTasks = []
        eachFile { copyTasks <<  it } // eachFileの実行タイミングはdoLastと同じ

        doLast {
            copyTasks.each { copyFileDetails ->
                def destFile = new File(destinationDir, copyFileDetails.path)
                if(destFile.exists()) { destFile.setLastModified(copyFileDetails.lastModified) }
            }
        }
    }
}

// 各バッチプロジェクトのシェルと設定ファイルをマスターにコピー
batchProjects.each { batchProject ->

    project( ":${batchProject}") {

         // シェルをコピー
        task copyShell(type: CopyExtended) {
            from "${deployRootDir}/${shellDir}"

            if(environment != envUt) {
                from "${deployRootDir}/${shellDir}_${environment}"
            }

            into "${masterDistsDir}/${shellDir}"
            include includeShells
            presereveTimestamp()
        }

        // 設定ファイルをコピー
        task copyConf(type: CopyExtended) {
            from "${deployRootDir}/${confDir}"

            if(environment != envUt) {
                from "${deployRootDir}/${confDir}_${environment}"
            }

            into "${masterDistsDir}/${confDir}"
            include includeConfs
            presereveTimestamp()
        }
    }
}

// 業務プロジェクトのJarをマスターにコピー
batchBizProjects.each { batchBizProject ->

    project( ":${batchBizProject}") {

        // Jarをコピー
        task copyJar << {

            // 業務Jar
            copy {
                from libsDir
                into "${masterDistsDir}/${jarDir}"
                include includeJars
            }

            // 依存Jar
            copy {
                from configurations.compile
                into "${masterDistsDir}/${dependenciesDir}"
                include includeDependencies
            }
        }
    }
}

// 配布リソースを圧縮
task zipDists(type: Zip)  {
    archiveName = distFilename
    from masterDistsDir
}

// デプロイ
task deployBatch(dependsOn: copyDeploied) << {

    ssh.run {

        session(remotes.transferer)  {

            // 作業ディレクトリをクリーン
            execute("rm -rf ${deployWorkDir}/*")
            execute("mkdir -p -m ${modeDir} ${deployWorkDir}")

            // 配布リソースを転送し、解凍
            put from: "${distsDir}/${distFilename}", into: deployWorkDir
            execute("unzip -o ${deployWorkDir}/${distFilename} -d ${deployWorkDir}")
        }

        session(remotes.deployer)  {

            // 他バージョンのJarを削除
            includeJars.each{ targetJar -> execute("rm -f ${deployRootDir}/${jarDir}/${targetJar}") }
            includeDependencies.each{ targetJar -> execute("rm -f ${deployRootDir}/${dependenciesDir}/${targetJar}") }

            // デプロイ
            execute("cp -ra ${deployWorkDir}/${deployRootDir} ${deployRootDir}") // デプロイ

            // 権限変更
            def resourceOwner = remotes.deployer.user
            execute("find ${deployRootDir}/${shellDir} ${deployRootDir}/${confDir} ${deployRootDir}/${jarDir} -type d -user ${resourceOwner} | xargs chmod ${modeDir}")
            execute("find ${deployRootDir}/${shellDir} -type f -user ${resourceOwner} | xargs chmod ${modeShell}")
            execute("find ${deployRootDir}/${confDir} -type f -user ${resourceOwner} | xargs chmod ${modeConf}")
            execute("find ${deployRootDir}/${jarDir} -type f -user ${resourceOwner} | xargs chmod ${modeJar}")
        }
    }
}

// デプロイリソースを、差分比較用ディレクトリにコピー
task copyDeploied (type: CopyExtended){

   // 配布リソースをdiffにコピー
    from "${distsDir}/${deployRootDir}"
    into "${diffDeploiedDir}/${deployHost}"
    presereveTimestamp()
}

// デプロイリソースをSVNにコミット
task commitDeploied(type: at.bxm.gradleplugins.svntools.tasks.SvnCommit, dependsOn: copyDeploied) {
    source <<  "${diffDeploiedDir}/${deployHost}"
    commitMessage = svnCommitMessage
}
