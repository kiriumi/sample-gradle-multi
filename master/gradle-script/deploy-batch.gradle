/*
 * バッチ関連のリソースをマスターに集約し、デプロイする
 * copyOuterResoucesToDists copyArchivesToDists zipDists
 *
 */
 apply plugin: 'java'

ext {
    // バッチプロジェクト
    batchProjects  = ['sample-gradle-multi-shared', 'sample-gradle-multi-app']
    batchBizProject = 'sample-gradle-multi-app'
    distDirs = [shellDir, confDir]

    tempDistsDir = "$distsDir/$deployRootDir"
}

// バッチプロジェクト共通
batchProjects.each { batchProject ->

    project( ":$batchProject") {

        // 外部リソースをコピー
        task copyDists << {

            distDirs.each { targetDir ->

                copy {
                    from "$deployRootDir/$targetDir"

                    if(!environment.equals('REL')) {
                        // 開発時は該当の面のシェルをコピー
                        from "$deployRootDir/$targetDir" + '_' + environment
                    }

                    into "$distsDir/$targetDir"
                }
            }
        }
    }
}

// 業務バッチプロジェクト
project( ":$batchBizProject") {

    // 業務バッチプロジェクトからJarをコピー
    task copyJars << {

        copy {
            from libsDir
            into "$distsDir/$jarDir"
        }

        copy {
            from configurations.compile
            into "$distsDir/$jarDir/dependencies"
        }
    }
}

// 全バッチプロジェクトのリソースをマスターにコピー
task copyDistsToMaster <<  {

    subprojects.each { subProject ->

         copy {
            from subProject.distsDir
            into tempDistsDir
        }
    }
}

// 配布物を圧縮
task zipDists(type: Zip, dependsOn: copyDistsToMaster)  {
    archiveName = String.format('dists-%s.zip', new Date().format('yyyyMMdd'));
    from tempDistsDir
}

// サーバ接続情報
remotes {

    transpoter {
        host = deployHost
        user = deployUser
        password = deployPassword

    }

    deployer {
        host = deployHost
        user = deployUser
        password = deployPassword
    }

}

// SSH共通設定　
ssh.settings {
    knownHosts = allowAnyHosts
}

// デプロイ
task deploy << {

    def deployWorkDir = '/WORK/deploy'

    ssh.run {

        session(remotes.transpoter)  {

            //execute("mkdir -p -m $modeDir $deployWorkDir") // 作業ディレクトリ作成
            //put from: deployWorkDir, into: deployWorkDir // サーバ転送
            // unzip // 解凍

        }

        session(remotes.deployer)  {

            //execute("rm -rf ") // 過去バージョンのJarを削除
            //execute("cp -ra $deployRootDir") // デプロイ

            // 権限変更
            execute("chmod $modeShell $deployRootDir/$shellDir")
            execute("chmod $modeConf $deployRootDir/$confDir")
            execute("chmod $modeArchive $deployRootDir/$jarDir")
        }
    }
}
