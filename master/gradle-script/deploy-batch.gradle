/*
 * バッチ関連のリソースをマスターに集約し、デプロイする
 * ・実行タスク：copyOuterResoucesToDists copyArchivesToDists zipDists
 *
 */
 apply plugin: 'java'

ext {
    // バッチプロジェクト
    batchProjects  = ['sample-gradle-multi-shared', 'sample-gradle-multi-app']
    batchBizProjects = ['sample-gradle-multi-app']

    masterDistsDir = "$distsDir/$deployRootDir"
}

def copyWithTimestamp = { batchProject, fromDir, intoDir ->

    def surffix = file(intoDir).name

    println batchProject


    project( ":$batchProject") {

        task "copy$surffix"(type: Copy) {

            from fromDir

            if(!environment.equals('REL')) {
                // 開発時は該当の面のシェルをコピー
                from fromDir + '_' + environment
            }

            into intoDir

            // 更新日時を維持する
            def copyDetails = []
            eachFile { copyDetails << it }
            doLast {
                    copyDetails.each { FileCopyDetails details ->
                            def target = new File(destinationDir, details.path)
                            if(target.exists()) { target.setLastModified(details.lastModified) }
                    }
            }
        }
    }
}

// バッチプロジェクト共通
batchProjects.each { batchProject ->

    // シェルと設定ファイルをコピー
    copyWithTimestamp(batchProject, "$deployRootDir/$shellDir", "$masterDistsDir/$shellDir")
    copyWithTimestamp(batchProject, "$deployRootDir/$confDir", "$masterDistsDir/$confDir")
}

   // 業務バッチプロジェクト
batchBizProjects.each { batchBizProject ->

    project( ":$batchBizProject") {

        // Jarをコピー
        task "copy$jarDir" << {

            copy {
                from libsDir
                into "$masterDistsDir/$jarDir"
            }

            copy {
                from configurations.compile
                into "$masterDistsDir/$jarDir/dependencies"
            }
        }
    }
}

// 配布リソースを圧縮
task zipDists(type: Zip)  {
    archiveName = String.format("$deployRootDir-%s.zip", new Date().format('yyyyMMdd'));
    from masterDistsDir
}

// サーバ接続情報
remotes {

    transpoter {
        host = deployHost
        user = deployUser
        password = deployPassword

    }

    deployer {
        host = deployHost
        user = deployUser
        password = deployPassword
    }

}

// SSH共通設定　
ssh.settings {
    knownHosts = allowAnyHosts
}

// デプロイ
task deploy << {

    def deployWorkDir = '/WORK/deploy'

    ssh.run {

        session(remotes.transpoter)  {

            //execute("mkdir -p -m $modeDir $deployWorkDir") // 作業ディレクトリ作成
            //put from: deployWorkDir, into: deployWorkDir // サーバ転送
            // unzip // 解凍

        }

        session(remotes.deployer)  {

            //execute("rm -rf ") // 過去バージョンのJarを削除
            //execute("cp -ra $deployRootDir") // デプロイ

            // 権限変更
            execute("chmod $modeShell $deployRootDir/$shellDir")
            execute("chmod $modeConf $deployRootDir/$confDir")
            execute("chmod $modeArchive $deployRootDir/$jarDir")
        }
    }
}
