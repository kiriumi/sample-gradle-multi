// 外部プラグインの適用
plugins {
  id 'com.github.spotbugs' version '1.6.4' // 静的解析
  id 'org.flywaydb.flyway' version '5.1.4' // DBマイグレーション
  id 'org.hidetake.ssh' version '2.9.0' // SSH
  id 'at.bxm.svntools' version '2.2.1' // SVN
}

// 拡張プロパティ
ext{
    // マスタープロジェクトのリソースディレクトリ
    masterResourcesDir = file('resources')
    checkstyleDir = file("${masterResourcesDir}/checkstyle")
    jacocoDir= file("${masterResourcesDir}/jacoco")

    // ローカルWebサーバのルートディレクトリ
    localWebServerRootDir = file('web-server')

    // プロジェクト一覧
    sharedProjects = sharedProjectNames.split() // 共有プロジェクト
    batchProjects = batchProjectNames.split() // バッチプロジェクト
    onlineProjects = onlineProjectNames.split() // オンラインプロジェクト
    batchBizProjects = batchProjects.findAll{ !sharedProjects.contains(it) } // 業務バッチプロジェクト
    onlineBizProjects = onlineProjects.findAll{ !sharedProjects.contains(it) } // 業務オンラインプロジェクト

    // flywayのタスククラス
    // ※拡張プロパティを通さないと、外部Gradleスクリプト側でクラスと認識されない
    flywayCleanTask = org.flywaydb.gradle.task.FlywayCleanTask
    flywayMigrateTask = org.flywaydb.gradle.task.FlywayMigrateTask

    // SVNのタスククラス
    // ※拡張プロパティを通さないと、外部Gradleスクリプト側でクラスと認識されない
    svnCommitTask = at.bxm.gradleplugins.svntools.tasks.SvnCommit
}

// 外部Gradleスクリプトの適用
def gradleScriptDir = 'gradle-script'
apply from: "${gradleScriptDir}/init-subprojects.gradle" // サブプロジェクトの初期化
apply from: "${gradleScriptDir}/db-migration.gradle" // DBマイグレーション
apply from: "${gradleScriptDir}/build-shared.gradle" // 共有プロジェクトのビルド
apply from: "${gradleScriptDir}/test.gradle" // テスト
apply from: "${gradleScriptDir}/deploy-batch.gradle" // デプロイ

// 全プロジェクト共通
allprojects {

    tasks.withType(JavaCompile){ options.encoding = 'UTF-8' }

    configurations.all {
        // 依存関係のあるJarに「changing = true」を付けると、ローカルにキャッシュしなくなる
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url innerMavenRepoUrl }
    }
}

// サブプロジェクト共通
// ※JDBCの依存関係はDBマイグレーションのGradleスクリプトで定義すること
subprojects{

    group = "${baseGroupId}.${groupId}"
    version = "${branchName}.${environment}"

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    // 依存関係
    dependencies {

        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
        compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
        compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'

        // 外部リソースのクラスパス
        runtime files("${deployRootDir}/${confDir}")
    }
}

public getGroup(def groupId) {

}
