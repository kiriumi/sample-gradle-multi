plugins {
  id 'org.hidetake.ssh' version '2.9.0'
  id 'com.github.spotbugs' version '1.6.4'
  id 'org.flywaydb.flyway' version '5.1.4'
}

ext{
    localWebServerRootDir = file('web-server')
    configDir = file('config')
    configCheckstyleDir = file('config/checkstyle')
    configJacocoDir= file('config/jacoco')
}

// 全プロジェクト共通
allprojects {

    apply plugin: 'java'

    tasks.withType(JavaCompile){ options.encoding = 'UTF-8' }

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url innerMavenRepoUrl }
    }

    // 依存関係
    dependencies {
        compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    }
}

// サブプロジェクト共通
subprojects{

    apply plugin: 'maven'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'org.flywaydb.flyway'

    group = 'sample.gradle.multi'
    version = branchName + '.' + environment

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    // 依存関係
    dependencies {

        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
        compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
        compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'

        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.18.0'


        // 外部リソースのクラスパス
        runtime files("$deployRootDir/$confDir")
    }

    checkstyle {
        configFile = new File(configDir,  'sun_checks.xml')
        ignoreFailures = true
    }

    checkstyleTest {
        excludes = ['**/*']
    }

    spotbugs {
        ignoreFailures = true
    }

    spotbugsTest {
        excludes = ['**/*']
    }

    test {
        jacoco {
            append = false
            destinationFile = file("$reportsDir/jacoco/jacoco.exec")
        }
    }
}

flyway {

    def subprojectSqlDir = []

    subprojects.each { subproject ->
        subprojectSqlDir.add('filesystem:' + new File(subproject.projectDir, 'sql').path)
    }

    driver = 'org.postgresql.Driver'
    url = 'jdbc:postgresql://localhost:5432/spring_batch_db'
    user = 'springrole'
    password = 'springrole'
    schemas = ['flyway1', 'flyway2']

    locations = subprojectSqlDir
    sqlMigrationPrefix = ''
    sqlMigrationSeparator = '_'
}

apply from: 'build-shared.gradle'
apply from: 'deploy-batch.gradle'
